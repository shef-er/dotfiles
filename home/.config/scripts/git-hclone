#!/usr/bin/env bash

GIT_CLONE_ROOT=${GIT_CLONE_ROOT:-'Clones'}

###

gitcmd="$(command -v git 2>/dev/null)"

if [ -z "$gitcmd" ]; then
    exit 1
fi

function _hclone_prepare_address {
    address="$1"

    # Cut out 'schema://' prefix if present
    fragments="${address#*'://'}"

    # Cut out 'user@'' prefix
    fragments="${fragments#*'@'}"

    # Cut out '.git' suffix
    fragments="${fragments%'.git'}"

    /usr/bin/echo -n "$fragments"
}

function _hclone_parse_path_from_url_address {
    address="$1"

    fragments="$(_hclone_prepare_address "$address")"

    host_fragment="${fragments%%'/'*}"
    host="${host_fragment%%':'*}"

    path="${fragments#*'/'}"

    /usr/bin/echo -n "$host/$path"
}

function _hclone_parse_path_from_scp_address {
    address="$1"

    fragments="$(_hclone_prepare_address "$address")"

    host_fragment="$fragments"
    host="${host_fragment%%':'*}"

    path="${fragments#*':'}"

    /usr/bin/echo -n "$host/$path"
}

function _hclone_parse_path_from_address {
    address="$1"

    # Check if address has schema prefix like 'http://' or 'ssh://'
    if [[ "$address" =~ ^[A-Za-z]+:// ]]; then
        path="$(_hclone_parse_path_from_url_address "$address")"
    else
        path="$(_hclone_parse_path_from_scp_address "$address")"
    fi

    /usr/bin/echo -n "$path"
}

# args=()
# while [ "$1" ]; do
#     case "$1" in
#     --) # End of input reading
#         shift
#         break
#         ;;
#     *)
#         args+=("$1")
#         shift
#         ;;
#     esac
# done
# # pass array this way
# "${args[@]}"

if [ -z "$1" ]; then
    exit 1
fi

address="$1"

path="$HOME/$GIT_CLONE_ROOT/$(_hclone_parse_path_from_address "$address")"

echo "$path"
# $gitcmd clone -- "$address" "$path"
